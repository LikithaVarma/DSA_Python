Problem Description Given an array A, find the size of the smallest subarray such that it contains at least one occurrence of the maximum value of the array and at least one occurrence of the minimum value of the array.
 Problem Constraints 1 <= |A| <= 2000 Input Format First and only argument is vector A Output Format Return the length of the smallest subarray which has at least one occurrence of minimum and maximum element of the array Example Input Input 1:
 A = [1, 3]
 Input 2:
 A = [2]
 Example Output Output 1:
 2
 Output 2:
 1
 Example Explanation Explanation 1: Only choice is to take both elements.
 Explanation 2: Take the whole array.
 
 class Solution:
    # @param A : list of integers
    # @return an integer
    def solve(self, A):
        minn=min(A)
        maxx=max(A)
        min_index=-1
        ans=len(A)
        for i in range(len(A)-1,-1,-1):
            if A[i]==minn:
                min_index=i 
            if A[i]==maxx and min_index!=-1:
                ans=min(ans,min_index-i+1)
        max_index=-1
        for i in range(len(A)-1,-1,-1):
            if A[i]==maxx:
                max_index=i 
            if A[i]==minn and max_index!=-1:
                ans=min(ans,max_index-i+1)
        return ans
