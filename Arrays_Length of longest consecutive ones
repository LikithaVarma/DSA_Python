Given a binary string A. It is allowed to do at most one swap between any 0 and 1. Find and return the length of the longest consecutive 1’s that can be achieved.
 Input Format The only argument given is string A.
 Output Format Return the length of the longest consecutive 1’s that can be achieved.
 Constraints
 1 <= length of string <= 1000000 A contains only characters 0 and 1.
 For Example
 Input 1:
 A = "111000"
 Output 1:
 3
 Input 2:
 A = "111011101"
 Output 2:
 7
 
 class Solution:
    # @param A : string
    # @return an integer
    def solve(self, A):
        n=len(A)
        left=[0]*n
        right=[0]*n
        left[0]=int(A[0])
        for i in range(1,n):
            if A[i]=='0':
                left[i]=0
            else:
                left[i]=int(left[i-1])+1
        right[n-1]=int(A[n-1])
        for i in range(n-2,-1,-1):
            if A[i]=='0':
                right[i]=0
            else:
                right[i]=int(right[i+1])+1
        #return left
        #number of ones
        ones=0
        for i in range(n):
            if A[i]=='1':
                ones+=1
        maxx=0
        curr=0
        flag=0
        if left[n-1]==len(A):
            return left[n-1]
        for i in range(0,n):
            if A[i]=='0':
                if i==0:
                    l=0
                else:
                    l=left[i-1]
                if i==n-1:
                    r=0
                else:
                    r=right[i+1]
                curr=l+r
            maxx=max(curr,maxx)
        if ones>maxx:
            return maxx+1
        else:
            return maxx         
        
            
        

